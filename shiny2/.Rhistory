shiny::runApp()
runApp()
runApp()
runApp()
source('C:/testshinyapps/app.R', echo=TRUE)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selectInput(
"breed",
"Select your favorite animal breed:",
choices =
list(`dogs` = list('German Shepherd', 'Bulldog', 'Labrador Retriever'),
`cats` = list('Persian cat', 'Bengal cat', 'Siamese Cat'))
)
selectInput(
"breed",
"Select your favorite animal breed:",
choices =
list(`dogs` = list('German Shepherd', 'Bulldog', 'Labrador Retriever'),
`cats` = list('Persian cat', 'Bengal cat', 'Siamese Cat'))
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages('vroom')
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
library(vroom)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
install_github("hadley/neiss")
library(devtools)
install_github("hadley/neiss")
library(devtools)
library(tidyverse)
# install_github("hadley/neiss")
library(neiss)
glimpse(injuries)
top_prod <- injuries %>%
filter(trmt_date >= as.Date("2017-01-01"), trmt_date < as.Date("2018-01-01")) %>%
count(prod1, sort = TRUE) %>%
filter(n > 5 * 365)
injuries %>%
filter(trmt_date >= as.Date("2017-01-01"), trmt_date < as.Date("2018-01-01")) %>%
semi_join(top_prod, by = "prod1") %>%
mutate(age = floor(age), sex = tolower(sex), race = tolower(race)) %>%
filter(sex != "unknown") %>%
select(trmt_date, age, sex, race, body_part, diag, location, prod_code = prod1, weight, narrative) %>%
vroom::vroom_write("neiss/injuries.tsv.gz")
injuries %>%
filter(trmt_date >= as.Date("2017-01-01"), trmt_date < as.Date("2018-01-01")) %>%
semi_join(top_prod, by = "prod1") %>%
mutate(age = floor(age), sex = tolower(sex), race = tolower(race)) %>%
filter(sex != "unknown") %>%
select(trmt_date, age, sex, race, body_part, diag, location, prod_code = prod1, weight, narrative) %>%
vroom::vroom_write("neiss/injuries.tsv.gz")
library(devtools)
library(tidyverse)
# install_github("hadley/neiss")
library(neiss)
top_prod <- injuries %>%
filter(trmt_date >= as.Date("2017-01-01"), trmt_date < as.Date("2018-01-01")) %>%
count(prod1, sort = TRUE) %>%
filter(n > 5 * 365)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries %>%
filter(trmt_date >= as.Date("2017-01-01"), trmt_date < as.Date("2018-01-01")) %>%
semi_join(top_prod, by = "prod1") %>%
mutate(age = floor(age), sex = tolower(sex), race = tolower(race)) %>%
filter(sex != "unknown") %>%
select(trmt_date, age, sex, race, body_part, diag, location, prod_code = prod1, weight, narrative)
injuries %>%
filter(trmt_date >= as.Date("2017-01-01"), trmt_date < as.Date("2018-01-01")) %>%
semi_join(top_prod, by = "prod1") %>%
mutate(age = floor(age), sex = tolower(sex), race = tolower(race)) %>%
filter(sex != "unknown") %>%
select(trmt_date, age, sex, race, body_part, diag, location, prod_code = prod1, weight, narrative) %>%
vroom::vroom_write("injuries.tsv.gz")
products %>%
semi_join(top_prod, by = c("code" = "prod1")) %>%
rename(prod_code = code) %>%
vroom::vroom_write("products.tsv")
population %>%
filter(year == 2017) %>%
select(-year) %>%
rename(population = n) %>%
vroom::vroom_write("population.tsv")
injuries <- vroom::vroom("injuries.tsv.gz")
injuries
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("products.tsv")
population <- vroom::vroom("population.tsv")
selected <- injuries %>% filter(prod_code == 649)
nrow(selected)
selected %>% count(location, wt = weight, sort = TRUE)
selected %>% count(body_part, wt = weight, sort = TRUE)
selected %>% count(diag, wt = weight, sort = TRUE)
summary <- selected %>%
count(age, sex, wt = weight)
summary %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
selected %>%
sample_n(10) %>%
pull(narrative)
runApp()
runApp()
runApp()
runApp()
runApp('C:/CHharmonizer/shiny2')
runApp()
runApp()
runApp()
runApp()
runApp('C:/CHharmonizer/shiny2')
runApp('C:/CHharmonizer/shiny2')
